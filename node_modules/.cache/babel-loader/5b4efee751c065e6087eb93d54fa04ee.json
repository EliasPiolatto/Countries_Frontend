{"ast":null,"code":"import { ORDER_BY, GET_COUNTRIES } from \"../actions/constantes\";\nlet initialState = {\n  allCountries: [],\n  backupCountries: []\n};\nexport default function rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GET_COUNTRIES:\n      return {\n        ...state,\n        allCountries: action.payload,\n        backupCountries: action.payload\n      };\n    case ORDER_BY:\n      if (action.payload === 'A-Z') {\n        return {\n          ...state,\n          allCountries: [...state.backupCountries].sort((prev, next) => {\n            if (prev.name > next.name) return 1;\n            if (prev.name < next.name) return -1;\n            return 0;\n          })\n        };\n      }\n      ;\n      if (action.payload === 'Z-A') {\n        return {\n          ...state,\n          allCountries: [...state.backupCountries].sort((prev, next) => {\n            if (prev.name > next.name) return -1;\n            if (prev.name < next.name) return 1;\n            return 0;\n          })\n        };\n      }\n      ;\n      if (action.payload === 'ratAsc') {\n        return {\n          ...state,\n          allCountries: [...state.backupCountries].sort((prev, next) => prev.rating - next.rating)\n        };\n      }\n      ;\n      if (action.payload === 'ratDesc') {\n        return {\n          ...state,\n          allCountries: [...state.backupCountries].sort((prev, next) => next.rating - prev.rating)\n        };\n      }\n      ;\n      return {\n        ...state,\n        allCountries: state.backupCountries\n      };\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"names":["ORDER_BY","GET_COUNTRIES","initialState","allCountries","backupCountries","rootReducer","state","action","type","payload","sort","prev","next","name","rating"],"sources":["C:/Users/Gamer/Desktop/PI-Countries-main/client/src/reducer/reducer.js"],"sourcesContent":["import { ORDER_BY, GET_COUNTRIES } from \"../actions/constantes\";\r\n\r\nlet initialState = {\r\nallCountries: [],\r\nbackupCountries: []\r\n};\r\n\r\n\r\n\r\nexport default function rootReducer(state = initialState, action){\r\n    switch(action.type){\r\n\r\n        case GET_COUNTRIES:\r\n            return {\r\n                ...state,\r\n                allCountries: action.payload,\r\n                backupCountries: action.payload\r\n            };\r\n\r\n        case ORDER_BY:\r\n            if(action.payload === 'A-Z'){\r\n                return {\r\n                    ...state, \r\n                    allCountries: [...state.backupCountries].sort((prev, next) => {\r\n                    if(prev.name > next.name) return 1\r\n                    if(prev.name < next.name) return -1\r\n                    return 0\r\n                })}\r\n            };\r\n            \r\n            if(action.payload === 'Z-A'){\r\n                return {\r\n                    ...state, \r\n                    allCountries: [...state.backupCountries].sort((prev, next) => {\r\n                    if(prev.name > next.name) return -1\r\n                    if(prev.name < next.name) return 1\r\n                    return 0\r\n                })}\r\n            };\r\n\r\n            if(action.payload === 'ratAsc'){\r\n                return {\r\n                    ...state,\r\n                    allCountries: [...state.backupCountries].sort((prev,next) => prev.rating - next.rating)\r\n                    }\r\n            };\r\n                          \r\n            if(action.payload === 'ratDesc'){\r\n                return {\r\n                    ...state,\r\n                    allCountries: [...state.backupCountries].sort((prev,next) => next.rating - prev.rating)\r\n                        }\r\n            };\r\n\r\n                return {\r\n                    ...state,\r\n                    allCountries: state.backupCountries\r\n            }\r\n\r\n        \r\n\r\n\r\n\r\n\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,aAAa,QAAQ,uBAAuB;AAE/D,IAAIC,YAAY,GAAG;EACnBC,YAAY,EAAE,EAAE;EAChBC,eAAe,EAAE;AACjB,CAAC;AAID,eAAe,SAASC,WAAW,GAA8B;EAAA,IAA7BC,KAAK,uEAAGJ,YAAY;EAAA,IAAEK,MAAM;EAC5D,QAAOA,MAAM,CAACC,IAAI;IAEd,KAAKP,aAAa;MACd,OAAO;QACH,GAAGK,KAAK;QACRH,YAAY,EAAEI,MAAM,CAACE,OAAO;QAC5BL,eAAe,EAAEG,MAAM,CAACE;MAC5B,CAAC;IAEL,KAAKT,QAAQ;MACT,IAAGO,MAAM,CAACE,OAAO,KAAK,KAAK,EAAC;QACxB,OAAO;UACH,GAAGH,KAAK;UACRH,YAAY,EAAE,CAAC,GAAGG,KAAK,CAACF,eAAe,CAAC,CAACM,IAAI,CAAC,CAACC,IAAI,EAAEC,IAAI,KAAK;YAC9D,IAAGD,IAAI,CAACE,IAAI,GAAGD,IAAI,CAACC,IAAI,EAAE,OAAO,CAAC;YAClC,IAAGF,IAAI,CAACE,IAAI,GAAGD,IAAI,CAACC,IAAI,EAAE,OAAO,CAAC,CAAC;YACnC,OAAO,CAAC;UACZ,CAAC;QAAC,CAAC;MACP;MAAC;MAED,IAAGN,MAAM,CAACE,OAAO,KAAK,KAAK,EAAC;QACxB,OAAO;UACH,GAAGH,KAAK;UACRH,YAAY,EAAE,CAAC,GAAGG,KAAK,CAACF,eAAe,CAAC,CAACM,IAAI,CAAC,CAACC,IAAI,EAAEC,IAAI,KAAK;YAC9D,IAAGD,IAAI,CAACE,IAAI,GAAGD,IAAI,CAACC,IAAI,EAAE,OAAO,CAAC,CAAC;YACnC,IAAGF,IAAI,CAACE,IAAI,GAAGD,IAAI,CAACC,IAAI,EAAE,OAAO,CAAC;YAClC,OAAO,CAAC;UACZ,CAAC;QAAC,CAAC;MACP;MAAC;MAED,IAAGN,MAAM,CAACE,OAAO,KAAK,QAAQ,EAAC;QAC3B,OAAO;UACH,GAAGH,KAAK;UACRH,YAAY,EAAE,CAAC,GAAGG,KAAK,CAACF,eAAe,CAAC,CAACM,IAAI,CAAC,CAACC,IAAI,EAACC,IAAI,KAAKD,IAAI,CAACG,MAAM,GAAGF,IAAI,CAACE,MAAM;QACtF,CAAC;MACT;MAAC;MAED,IAAGP,MAAM,CAACE,OAAO,KAAK,SAAS,EAAC;QAC5B,OAAO;UACH,GAAGH,KAAK;UACRH,YAAY,EAAE,CAAC,GAAGG,KAAK,CAACF,eAAe,CAAC,CAACM,IAAI,CAAC,CAACC,IAAI,EAACC,IAAI,KAAKA,IAAI,CAACE,MAAM,GAAGH,IAAI,CAACG,MAAM;QAClF,CAAC;MACb;MAAC;MAEG,OAAO;QACH,GAAGR,KAAK;QACRH,YAAY,EAAEG,KAAK,CAACF;MAC5B,CAAC;IAQL;MAAS,OAAOE,KAAK;EAAC;AAE9B;AAAC"},"metadata":{},"sourceType":"module"}