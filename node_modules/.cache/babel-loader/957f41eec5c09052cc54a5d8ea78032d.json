{"ast":null,"code":"import { ORDER_BY, GET_COUNTRIES, GET_ACTIVITIES, FILTER_ACT, FILTER_CONTINENT, GET_BY_NAME, GET_BY_ID } from \"../actions/constantes\";\nlet initialState = {\n  allCountries: [],\n  backupCountries: [],\n  activities: []\n};\nexport default function rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case GET_COUNTRIES:\n      return {\n        ...state,\n        allCountries: action.payload,\n        backupCountries: action.payload\n      };\n    case GET_BY_NAME:\n      return {\n        ...state,\n        allCountries: action.payload\n      };\n    case GET_BY_ID:\n      return {\n        ...state,\n        allCountries: action.payload\n      };\n    case GET_ACTIVITIES:\n      return {\n        ...state,\n        activities: action.payload\n      };\n    case ORDER_BY:\n      if (action.payload === 'A-Z') {\n        return {\n          ...state,\n          allCountries: [...state.allCountries].sort((prev, next) => {\n            if (prev.name > next.name) return 1;\n            if (prev.name < next.name) return -1;\n            return 0;\n          })\n        };\n      }\n      ;\n      if (action.payload === 'Z-A') {\n        return {\n          ...state,\n          allCountries: [...state.allCountries].sort((prev, next) => {\n            if (prev.name > next.name) return -1;\n            if (prev.name < next.name) return 1;\n            return 0;\n          })\n        };\n      }\n      ;\n      if (action.payload === 'minPop') {\n        return {\n          ...state,\n          allCountries: [...state.allCountries].sort((prev, next) => prev.population - next.population)\n        };\n      }\n      ;\n      if (action.payload === 'maxPop') {\n        return {\n          ...state,\n          allCountries: [...state.allCountries].sort((prev, next) => next.population - prev.population)\n        };\n      }\n      ;\n      return {\n        ...state,\n        allCountries: state.backupCountries\n      };\n    case FILTER_ACT:\n      let acts = state.activities;\n      let filter = acts.length && action.payload === 'All' ? state.backupCountries.filter(c => c.activities.length > 0) : state.backupCountries.filter(c => c.activities.find(el => el.name === action.payload));\n      if (action.payload === 'Tourist activity') {\n        return {\n          ...state,\n          allCountries: state.backupCountries\n        };\n      }\n      ;\n      return {\n        ...state,\n        allCountries: filter\n      };\n    case FILTER_CONTINENT:\n      let conts = state.backupCountries;\n      conts = conts && action.payload === 'All' ? conts : conts.filter(el => el.continent === action.payload);\n      return {\n        ...state,\n        allCountries: conts\n      };\n    default:\n      return state;\n  }\n}\n;","map":{"version":3,"names":["ORDER_BY","GET_COUNTRIES","GET_ACTIVITIES","FILTER_ACT","FILTER_CONTINENT","GET_BY_NAME","GET_BY_ID","initialState","allCountries","backupCountries","activities","rootReducer","state","action","type","payload","sort","prev","next","name","population","acts","filter","length","c","find","el","conts","continent"],"sources":["C:/Users/Gamer/Desktop/PI-Countries-main/client/src/reducer/reducer.js"],"sourcesContent":["import { ORDER_BY, GET_COUNTRIES, GET_ACTIVITIES, FILTER_ACT, FILTER_CONTINENT, GET_BY_NAME, GET_BY_ID } from \"../actions/constantes\";\r\n\r\nlet initialState = {\r\nallCountries: [],\r\nbackupCountries: [],\r\nactivities: [],\r\n};\r\n\r\n\r\n\r\n\r\nexport default function rootReducer(state = initialState, action){\r\n    switch(action.type){\r\n\r\n        case GET_COUNTRIES:\r\n            return {\r\n                ...state,\r\n                allCountries: action.payload,\r\n                backupCountries: action.payload\r\n            };\r\n\r\n        case GET_BY_NAME:\r\n            return {\r\n                ...state,\r\n                allCountries: action.payload\r\n            };\r\n\r\n        case GET_BY_ID:\r\n            return {\r\n                ...state,\r\n                allCountries: action.payload\r\n            };\r\n\r\n        case GET_ACTIVITIES:\r\n            return {\r\n                ...state,\r\n                activities: action.payload\r\n            };\r\n\r\n        case ORDER_BY:\r\n            \r\n            if(action.payload === 'A-Z'){\r\n                return {\r\n                    ...state, \r\n                    allCountries: [...state.allCountries].sort((prev, next) => {\r\n                    if(prev.name > next.name) return 1\r\n                    if(prev.name < next.name) return -1\r\n                    return 0\r\n                })}\r\n            };\r\n            \r\n            if(action.payload === 'Z-A'){\r\n                return {\r\n                    ...state, \r\n                    allCountries: [...state.allCountries].sort((prev, next) => {\r\n                    if(prev.name > next.name) return -1\r\n                    if(prev.name < next.name) return 1\r\n                    return 0\r\n                })}\r\n            };\r\n\r\n            if(action.payload === 'minPop'){\r\n                return {\r\n                    ...state,\r\n                    allCountries: [...state.allCountries].sort((prev,next) => prev.population - next.population)\r\n                    }\r\n            };\r\n                          \r\n            if(action.payload === 'maxPop'){\r\n                return {\r\n                    ...state,\r\n                    allCountries: [...state.allCountries].sort((prev,next) => next.population - prev.population)\r\n                        }\r\n            };\r\n\r\n                return {\r\n                    ...state,\r\n                    allCountries: state.backupCountries\r\n            };\r\n\r\n        case FILTER_ACT:\r\n            let acts = state.activities;\r\n\r\n            let filter = acts.length && action.payload === 'All' ? state.backupCountries.filter(c => c.activities.length > 0) : state.backupCountries.filter(c => c.activities.find(el => el.name === action.payload));\r\n\r\n            if(action.payload === 'Tourist activity'){\r\n\r\n                return {\r\n                    ...state,\r\n                    allCountries: state.backupCountries\r\n                }\r\n            };\r\n\r\n            \r\n                return {\r\n                    ...state,\r\n                    allCountries: filter\r\n                };\r\n\r\n        case FILTER_CONTINENT:\r\n                let conts = state.backupCountries;\r\n\r\n                conts = conts && action.payload === 'All' ? conts : conts.filter(el => el.continent === action.payload);\r\n                \r\n\r\n            return {\r\n                ...state,\r\n                allCountries: conts\r\n            };\r\n        \r\n\r\n\r\n\r\n\r\n\r\n        default: return state;\r\n    }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}